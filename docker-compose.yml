services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:29092
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 5s
      retries: 15
      start_period: 10s

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka_init_topics
    depends_on:
      kafka:
        condition: service_healthy
    command: 
      - /bin/sh
      - -c
      - |
        echo "Waiting for Kafka to be ready..."
        # Пробуем подключиться к внутреннему порту Kafka
        until kafka-topics --bootstrap-server kafka:29092 --list; do 
          echo "Kafka not ready yet, waiting..."
          sleep 5; 
        done
        echo "Kafka is ready, creating topics..."
        kafka-topics --create --if-not-exists --topic orders --partitions 2 --replication-factor 1 --bootstrap-server kafka:29092
        kafka-topics --create --if-not-exists --topic orders-dlq --partitions 1 --replication-factor 1 --bootstrap-server kafka:29092
        echo "Topics created successfully"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      - kafka

  postgres:
    image: postgres:17
    container_name: postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  sender:
    image: bash:5.2.21
    container_name: sender
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      sh -c "
      apk update && 
      apk add --no-cache jq kcat && 
      until kcat -b kafka:9092 -L; do sleep 2; done; 
      tail -f /dev/null
      "
volumes:
  pgdata: